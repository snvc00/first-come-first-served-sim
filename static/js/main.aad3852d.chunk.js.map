{"version":3,"sources":["components/Title/Title.js","components/Window/Window.js","utils/Process.js","utils/interruptions.js","utils/processes.js","pages/FirstComeFirstServed/FirstComeFirstServed.js","App.js","index.js"],"names":["Title","children","className","Window","title","icon","Frame","boxShadow","marginBottom","TitleBar","active","width","OptionsBox","Option","style","minHeight","padding","Process","id","this","maxTime","Math","floor","random","executionTime","operator","firstOperand","secondOperand","error","timeToUnblock","arrivalTime","startTime","endTime","undefined","evaluate","pow","result","globalTime","partialLog","INTERRUPTIONS","e","description","w","p","c","n","b","generateProcesses","totalProcesses","startId","processes","i","push","Container","styled","div","FirstComeFirstServed","processingDone","useState","setGlobalTime","actionLogs","setActionLogs","newProcesses","setNewProcesses","readyProcesses","setReadyProcesses","processInExecution","setProcessInExecution","blockedProcesses","setBlockedProcesses","terminatedProcesses","setTerminatedProcesses","isPaused","setIsPaused","isProcessing","setIsProcessing","Date","lastKeyDown","setLastKeyDown","reportLogged","setReportLogged","lastUpdate","setLastUpdate","simulationEnd","setSimulationEnd","nextId","setNextId","onkeydown","key","toLowerCase","operationWasPerformed","now","toLocaleTimeString","block","nextProc","shift","throwError","processesInMemory","length","newProcess","logPartialProgress","console","log","forEach","process","useEffect","newProcs","readyProcs","procToExecute","totalReadyProcesses","min","MAX_PROCESSES_ON_MEMORY","interval","setInterval","clearInterval","report","proc","procsToUnblock","update","updateBlockedProcesses","isTerminated","readyProc","nextReadyProc","textAlign","Button","onClick","variant","map","index","Fieldset","legend","operation","ProgressBar","percent","round","Array","isArray","TextArea","readOnly","value","height","TaskBar","list","List","Item","Form","form","App","setTotalProcesses","onSubmit","preventDefault","Input","placeholder","type","onChange","target","required","parseInt","ReactDOM","render","ThemeProvider","GlobalStyle","document","getElementById"],"mappings":"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","file":"static/js/main.aad3852d.chunk.js","sourcesContent":["import './Title.css'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Title = ({ children }) => {\n  return (\n    <h1 className='title'>{children}</h1>\n  )\n}\n\nTitle.propTypes = {\n  children: PropTypes.string\n}\n\nexport default Title\n","import { TitleBar, Frame } from '@react95/core'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Window = ({ children, title, icon }) => {\n  return (\n    <Frame boxShadow='out' marginBottom='10px'>\n      <TitleBar\n        active\n        icon={icon}\n        title={title}\n        width='100%'\n      >\n        <TitleBar.OptionsBox>\n          <TitleBar.Option>X</TitleBar.Option>\n        </TitleBar.OptionsBox>\n      </TitleBar>\n      <div style={{ minHeight: 200, padding: 10 }}>\n        {children}\n      </div>\n    </Frame>\n  )\n}\n\nWindow.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array\n  ]),\n  title: PropTypes.string,\n  icon: PropTypes.object\n}\n\nexport default Window\n","class Process {\n  constructor (id) {\n    this.id = id\n    this.maxTime = Math.floor(Math.random() * 10) + 6\n    this.executionTime = 0\n    this.operator = ['+', '-', '*', '/', '%', '^'][Math.floor(Math.random() * 6)]\n    this.firstOperand = Math.floor(Math.random() * 100)\n    this.secondOperand = Math.floor(Math.random() * 100) + 1\n    this.error = false\n    this.timeToUnblock = 0\n    this.arrivalTime = -1\n    this.startTime = -1\n    this.endTime = undefined\n  }\n\n  get operation () {\n    return `${this.firstOperand} ${this.operator} ${this.secondOperand}`\n  }\n\n  get result () {\n    return this.error === true ? 'ERROR' : this.evaluate()\n  }\n\n  throwError () {\n    this.error = true\n  }\n\n  block () {\n    this.timeToUnblock = 7\n  }\n\n  update () {\n    this.timeToUnblock > 0 ? --this.timeToUnblock : ++this.executionTime\n  }\n\n  isTerminated () {\n    return this.error === true || (this.maxTime === this.executionTime)\n  }\n\n  evaluate () {\n    switch (this.operator) {\n      case '+':\n        return this.firstOperand + this.secondOperand\n      case '-':\n        return this.firstOperand - this.secondOperand\n      case '*':\n        return this.firstOperand * this.secondOperand\n      case '/':\n        return this.firstOperand / this.secondOperand\n      case '%':\n        return this.firstOperand % this.secondOperand\n      case '^':\n        return Math.pow(this.firstOperand, this.secondOperand)\n      default:\n        return 'UNDEFINED'\n    }\n  }\n\n  toString () {\n    return `Process ${this.id}: ${this.firstOperand} ${this.operator} ${this.secondOperand} = ${this.result} took ${this.executionTime} seconds`\n  }\n\n  log () {\n    return `** PID ${this.id}, ${this.error ? 'ERROR' : 'NORMAL'} **\\n\n            Estimated Time: ${this.maxTime}\n            Arrival Time: ${this.arrivalTime}\n            End Time: ${this.endTime}\n            Standby Time: ${(this.endTime - this.arrivalTime) - this.executionTime}\n            Service Time: ${this.executionTime}\n            Return Time: ${this.endTime - this.arrivalTime}\n            Response Time: ${this.startTime - this.arrivalTime}\\n\\n************`\n  }\n\n  partialLog (globalTime) {\n    let partialLog = `** PID ${this.id}, ${this.error ? 'ERROR' : 'NORMAL'} **\\n`\n    partialLog += `\\tEstimated Time: ${this.maxTime}\\n`\n    partialLog += `\\tArrival Time: ${this.arrivalTime !== -1 ? this.arrivalTime : '-'}\\n`\n    partialLog += `\\tEnd Time: ${this.endTime ?? '-'}\\n`\n    partialLog += `\\tStandby Time: ${this.arrivalTime !== -1 ? (globalTime - this.arrivalTime - this.executionTime) : '-'}\\n`\n    partialLog += `\\tService Time: ${this.arrivalTime !== -1 ? this.executionTime : '-'}\\n`\n    partialLog += `\\tReturn Time: ${this.endTime ? (this.endTime - this.arrivalTime) : '-'}\\n`\n    partialLog += `\\tRemaining Time on CPU: ${this.startTime !== -1 ? (this.maxTime - this.executionTime) : '-'}\\n`\n    partialLog += `\\tResponse Time: ${(this.startTime !== -1 && this.arrivalTime !== -1) ? (this.startTime - this.arrivalTime) : '-'}\\n`\n\n    return partialLog\n  }\n}\n\nexport default Process\n","export const INTERRUPTIONS = {\n  e: {\n    description: 'I/O interruption'\n  },\n  w: {\n    description: 'Error in process'\n  },\n  p: {\n    description: 'Pause'\n  },\n  c: {\n    description: 'Continue'\n  },\n  n: {\n    description: 'New process'\n  },\n  b: {\n    description: 'Process table'\n  }\n}\n","import { Process } from '.'\n\nexport const generateProcesses = (totalProcesses, startId = undefined) => {\n  let id = startId ?? 0\n  const processes = []\n  for (let i = 0; i < totalProcesses; ++i) {\n    processes.push(new Process(id++))\n  }\n\n  return processes\n}\n","import './FirstComeFirstServed.css'\nimport styled from 'styled-components'\n\nimport { ProgressBar, Fieldset, TextArea, TaskBar, List, Button } from '@react95/core'\nimport { Notepad, BatWait, BatExec2, Qfecheck111, RecycleEmpty, User2 } from '@react95/icons'\nimport React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Window from '../../components/Window'\nimport { INTERRUPTIONS, generateProcesses, Process } from '../../utils'\n\nconst Container = styled.div`\n  margin: auto;\n  padding: 10px;\n  display: block;\n  width: 60%;\n`\n\nconst FirstComeFirstServed = ({ totalProcesses, processingDone }) => {\n  const [globalTime, setGlobalTime] = useState(0)\n  const [actionLogs, setActionLogs] = useState('')\n  const [newProcesses, setNewProcesses] = useState([])\n  const [readyProcesses, setReadyProcesses] = useState([])\n  const [processInExecution, setProcessInExecution] = useState()\n  const [blockedProcesses, setBlockedProcesses] = useState([])\n  const [terminatedProcesses, setTerminatedProcesses] = useState([])\n  const [isPaused, setIsPaused] = useState(false)\n  const [isProcessing, setIsProcessing] = useState(true)\n  const [lastKeyDown, setLastKeyDown] = useState(new Date())\n  const [reportLogged, setReportLogged] = useState(false)\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  const [simulationEnd, setSimulationEnd] = useState(null)\n  const [nextId, setNextId] = useState(totalProcesses)\n\n  const MAX_PROCESSES_ON_MEMORY = 4\n\n  onkeydown = ({ key }) => {\n    key = key.toLowerCase()\n    let operationWasPerformed = false\n    const now = new Date()\n    setLastKeyDown(now)\n\n    if ((now - lastKeyDown) < 1000) {\n      setActionLogs(actionLogs + `[${now.toLocaleTimeString()}, Global Time: ${globalTime} seconds] - Actions are limited to 1 per second\\n`)\n      return\n    }\n\n    if (INTERRUPTIONS?.[key]) {\n      switch (key) {\n        case 'e':\n          if (isPaused === false && processInExecution instanceof Process) {\n            processInExecution.block()\n            blockedProcesses.push(processInExecution)\n            const nextProc = readyProcesses.shift()\n            if (nextProc instanceof Process) {\n              if (nextProc.startTime === -1) {\n                nextProc.startTime = globalTime\n              }\n              setProcessInExecution(nextProc)\n            } else {\n              setProcessInExecution(null)\n            }\n            operationWasPerformed = true\n          }\n          break\n        case 'w':\n          if (isPaused === false && processInExecution instanceof Process) {\n            processInExecution.throwError()\n            operationWasPerformed = true\n          }\n          break\n        case 'p':\n          if (isPaused === false) {\n            setIsPaused(true)\n            operationWasPerformed = true\n          }\n          break\n        case 'c':\n          if (isPaused === true) {\n            setIsPaused(false)\n            operationWasPerformed = true\n          }\n          break\n        case 'n':\n          if (isPaused === false) {\n            let processesInMemory = processInExecution instanceof Process ? 1 : 0\n            processesInMemory += readyProcesses.length\n            processesInMemory += blockedProcesses.length\n\n            const newProcess = generateProcesses(1, nextId)[0]\n            setNextId(nextId + 1)\n            if (processesInMemory < 4) {\n              newProcess.arrivalTime = globalTime\n              readyProcesses.push(newProcess)\n            } else {\n              newProcesses.push(newProcess)\n            }\n\n            operationWasPerformed = true\n          }\n          break\n        case 'b':\n          if (isPaused === false) {\n            setIsPaused(true)\n            logPartialProgress()\n          }\n          break\n        default:\n          console.log(`Not implemented action triggered with ${key}`)\n      }\n\n      if (operationWasPerformed === true) {\n        setActionLogs(actionLogs + `[${new Date().toLocaleTimeString()}, Global Time: ${globalTime} seconds] - ${INTERRUPTIONS[key].description}\\n`)\n      }\n    }\n  }\n\n  const logPartialProgress = () => {\n    let log = actionLogs + `[${new Date().toLocaleTimeString()}, Global Time: ${globalTime} seconds] - ${INTERRUPTIONS.b.description}\\n`\n\n    newProcesses.forEach((process) => {\n      log += process.partialLog(globalTime) + '\\tStatus: New\\n************\\n'\n    })\n\n    readyProcesses.forEach((process) => {\n      log += process.partialLog(globalTime) + '\\tStatus: Ready\\n************\\n'\n    })\n\n    if (processInExecution instanceof Process) {\n      log += processInExecution.partialLog(globalTime) + '\\tStatus: In Execution\\n************\\n'\n    }\n\n    terminatedProcesses.forEach((process) => {\n      log += process.partialLog(globalTime) + '\\tStatus: Terminated\\n************\\n'\n    })\n\n    setActionLogs(log)\n  }\n\n  useEffect(() => {\n    const newProcs = generateProcesses(totalProcesses)\n    const readyProcs = []\n\n    const procToExecute = newProcs.shift()\n    procToExecute.arrivalTime = 0\n    procToExecute.startTime = 0\n\n    const totalReadyProcesses = Math.min(newProcs.length, MAX_PROCESSES_ON_MEMORY - 1)\n    for (let i = 0; i < totalReadyProcesses; ++i) {\n      const process = newProcs.shift()\n      process.arrivalTime = 0\n      readyProcs.push(process)\n    }\n    setNewProcesses(newProcs)\n    setReadyProcesses(readyProcs)\n    setProcessInExecution(procToExecute)\n  }, [totalProcesses])\n\n  const updateBlockedProcesses = () => {\n    let procsToUnblock = 0\n    blockedProcesses.forEach((process) => {\n      if (process.timeToUnblock === 0) {\n        ++procsToUnblock\n      } else {\n        process.update()\n      }\n    })\n\n    for (let i = 0; i < procsToUnblock; ++i) {\n      readyProcesses.push(blockedProcesses.shift())\n    }\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!isPaused) {\n        setGlobalTime(globalTime => globalTime + 1)\n      }\n    }, 1000)\n\n    return () => clearInterval(interval)\n  }, [isPaused])\n\n  useEffect(() => {\n    // Avoid updating more than 1 t/s\n    const now = new Date()\n    if ((now - lastUpdate) < 900) {\n      return\n    }\n    setLastUpdate(now)\n\n    // Check if process end\n    if (newProcesses.length === 0 && readyProcesses.length === 0 && blockedProcesses.length === 0 && processInExecution === null) {\n      setIsProcessing(false)\n      if (simulationEnd === null) {\n        setSimulationEnd(globalTime)\n      }\n      return\n    }\n\n    if (isProcessing === false && reportLogged === false) {\n      let report = `[${new Date().toLocaleTimeString()}, Global Time: ${globalTime} seconds] - All process were terminated, generating report...\\n--------------------\\n`\n      terminatedProcesses.forEach(proc => {\n        report += proc.log() + '\\n'\n      })\n      report += '--------------------\\n'\n\n      setActionLogs(actionLogs + report)\n      setReportLogged(true)\n      setProcessInExecution(null)\n    }\n\n    if (isPaused === false && isProcessing === true) {\n      updateBlockedProcesses()\n\n      if (processInExecution instanceof Process) {\n        if (processInExecution.isTerminated()) {\n          // Push to terminated\n          processInExecution.endTime = globalTime - 1\n          terminatedProcesses.push(processInExecution)\n\n          // If there is a new process add it to ready\n          if (newProcesses.length > 0) {\n            const readyProc = newProcesses.shift()\n            if (readyProc.arrivalTime === -1) {\n              readyProc.arrivalTime = globalTime\n            }\n            readyProcesses.push(readyProc)\n          }\n\n          // Define next process will be executed\n          const nextReadyProc = readyProcesses.shift()\n          if (nextReadyProc instanceof Process) {\n            if (nextReadyProc.startTime === -1) {\n              nextReadyProc.startTime = globalTime\n            }\n            setProcessInExecution(nextReadyProc)\n          } else {\n            // If there are no blocked processes, end processing\n            if (blockedProcesses.length === 0) {\n              setIsProcessing(false)\n              if (simulationEnd === null) {\n                setSimulationEnd(globalTime)\n              }\n            } else {\n              setProcessInExecution(null)\n            }\n          }\n        } else {\n          if (processInExecution.timeToUnblock === 0) {\n            processInExecution.update()\n          }\n        }\n      } else {\n        // If there is no process in execution, check if one is ready\n        if (readyProcesses.length > 0) {\n          const nextProc = readyProcesses.shift()\n          if (nextProc.startTime === -1) {\n            nextProc.startTime = globalTime\n          }\n          setProcessInExecution(nextProc)\n        }\n      }\n    }\n  }, [reportLogged, setGlobalTime, globalTime, setIsPaused, isPaused, isProcessing, processInExecution, terminatedProcesses, newProcesses, readyProcesses, blockedProcesses, setBlockedProcesses, setTerminatedProcesses])\n\n  return (\n    <>\n      <Container>\n        <div style={{ textAlign: 'center' }}>\n          <h1>New processes: {newProcesses.length}</h1>\n          {\n            !isProcessing && simulationEnd !== null\n              ? (\n                <>\n                  <h2>Global Time: {simulationEnd} seconds</h2>\n                  <Button onClick={processingDone}>Return</Button>\n                </>\n                )\n              : (<h2>Global Time: {globalTime} seconds</h2>)\n          }\n        </div>\n        <br />\n        <Window title='ready - Process Simulation' icon={<BatWait variant='32x32_4' />}>\n          {\n            readyProcesses.map((process, index) => (\n              <Fieldset key={index} legend={`PID ${process.id}`} style={{ width: '90%', textAlign: 'left', marginBottom: 10 }}>\n                <p key={index + '_p'}>Estimated execution time: {process.maxTime} seconds - Ellapsed time: {process.executionTime} seconds</p>\n              </Fieldset>)\n            )\n          }\n        </Window>\n        <Window title='execution - Process Simulation' icon={<BatExec2 variant='32x32_4' />}>\n          {\n            processInExecution instanceof Process\n              ? (\n                <Fieldset legend={`PID ${processInExecution.id}`} className='process-fieldset'>\n                  <p>Operation: {processInExecution.operation}</p>\n                  <p>Estimated execution time: {processInExecution.maxTime} seconds</p>\n                  <p>Ellapsed time: {processInExecution.executionTime} seconds</p>\n                  <p>Missing time: {processInExecution.maxTime - processInExecution.executionTime} seconds</p>\n                  <ProgressBar width={200} percent={Math.round(processInExecution.executionTime / processInExecution.maxTime * 100)} />\n                </Fieldset>\n                )\n              : (<></>)\n          }\n        </Window>\n        <Window title='blocked - Process Simulation' icon={<User2 variant='32x32_4' />}>\n          {\n            Array.isArray(blockedProcesses)\n              ? blockedProcesses.map((process, index) => (\n                <Fieldset key={index} legend={`PID ${process.id}`} style={{ width: '90%', textAlign: 'left', marginBottom: 10 }}>\n                  <p key={index + '_p'}>Estimated execution time: {process.maxTime} seconds - Blocked time: {7 - process.timeToUnblock} seconds</p>\n                </Fieldset>)\n              )\n              : (<></>)\n          }\n        </Window>\n        <Window title='terminated - Process Simulation' icon={<Qfecheck111 variant='32x32_4' />}>\n          {\n            Array.isArray(terminatedProcesses)\n              ? terminatedProcesses.map(process => (\n                <Fieldset key={process.id} legend={`PID ${process.id}`} className='process-fieldset'>\n                  <p key={process.id + '_p'}>{process.operation} = {process.result}</p>\n                </Fieldset>)\n              )\n              : (<></>)\n          }\n        </Window>\n        <Window title='logs.txt - Notepad' icon={<Notepad variant='32x32_4' />}>\n          <TextArea readOnly value={actionLogs} style={{ width: '100%', height: 200 }} />\n          <br /><br />\n          <Button onClick={() => { setActionLogs('') }}>Clear logs</Button>\n        </Window><br />\n      </Container>\n      <TaskBar\n        list={\n          <List>\n            <List.Item\n              key='reset'\n              icon={<RecycleEmpty variant='32x32_4' />}\n              onClick={() => {\n                setIsProcessing(false)\n                processingDone()\n              }}\n            >\n              Empty and Restart\n            </List.Item>\n          </List>\n        }\n      />\n    </>\n  )\n}\n\nFirstComeFirstServed.propTypes = {\n  totalProcesses: PropTypes.number,\n  processingDone: PropTypes.func\n}\n\nexport default FirstComeFirstServed\n","import styled from 'styled-components'\n\nimport { Button, Input } from '@react95/core'\nimport React, { useState } from 'react'\n\nimport Title from './components/Title'\nimport FirstComeFirstServed from './pages/FirstComeFirstServed'\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`\n\nfunction App () {\n  const [totalProcesses, setTotalProcesses] = useState(0)\n  const [isProcessing, setIsProcessing] = useState(false)\n\n  const startProcessing = e => {\n    e.preventDefault()\n    setIsProcessing(true)\n  }\n\n  const processingDone = () => {\n    setIsProcessing(false)\n  }\n\n  return (\n    isProcessing === false\n      ? (\n          <Form onSubmit={startProcessing}>\n            <Title>First Come First Served</Title>\n            <Input\n              placeholder='# of processes'\n              style={{ marginBottom: 10 }}\n              type='number'\n              min='1'\n              onChange={({ target }) => setTotalProcesses(target.value)}\n              required\n            />\n            <br />\n            <Button>Start</Button>\n          </Form>\n        )\n      : (<FirstComeFirstServed totalProcesses={parseInt(totalProcesses)} processingDone={processingDone} />)\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider, GlobalStyle } from '@react95/core'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <ThemeProvider>\n    <GlobalStyle />\n      <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}