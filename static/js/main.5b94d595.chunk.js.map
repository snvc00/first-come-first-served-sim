{"version":3,"sources":["components/Title/Title.jsx","components/Window/Window.jsx","utils/Process.js","utils/interruptions.js","pages/FirstComeFirstServed/FirstComeFirstServed.jsx","utils/processes.js","App.js","index.js"],"names":["Title","children","className","Window","title","icon","Frame","boxShadow","marginBottom","TitleBar","active","width","OptionsBox","Option","style","minHeight","padding","Process","id","this","maxTime","Math","floor","random","executionTime","operator","firstOperand","secondOperand","error","timeToUnblock","arrivalTime","startTime","evaluate","pow","result","endTime","INTERRUPTIONS","e","description","w","p","c","Container","styled","div","FirstComeFirstServed","totalProcesses","processingDone","useState","globalTime","setGlobalTime","actionLogs","setActionLogs","newProcesses","setNewProcesses","readyProcesses","setReadyProcesses","processInExecution","setProcessInExecution","blockedProcesses","setBlockedProcesses","terminatedProcesses","setTerminatedProcesses","isPaused","setIsPaused","isProcessing","setIsProcessing","Date","lastKeyDown","setLastKeyDown","reportLogged","setReportLogged","lastUpdate","setLastUpdate","simulationEnd","setSimulationEnd","onkeydown","key","toLowerCase","operationWasPerformed","now","toLocaleTimeString","block","push","nextProc","shift","throwError","console","log","useEffect","newProcs","processes","i","generateProcesses","readyProcs","procToExecute","totalReadyProcesses","min","length","MAX_PROCESSES_ON_MEMORY","process","interval","setInterval","clearInterval","report","forEach","proc","procsToUnblock","update","updateBlockedProcesses","isTerminated","readyProc","nextReadyProc","textAlign","Button","onClick","variant","map","index","Fieldset","legend","operation","ProgressBar","percent","round","Array","isArray","TextArea","readOnly","value","height","TaskBar","list","List","Item","Form","form","App","setTotalProcesses","onSubmit","preventDefault","Input","placeholder","type","onChange","target","required","parseInt","ReactDOM","render","ThemeProvider","GlobalStyle","document","getElementById"],"mappings":"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","file":"static/js/main.5b94d595.chunk.js","sourcesContent":["import './Title.css'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Title = ({ children }) => {\n  return (\n    <h1 className='title'>{children}</h1>\n  )\n}\n\nTitle.propTypes = {\n  children: PropTypes.string\n}\n\nexport default Title\n","import { TitleBar, Frame } from '@react95/core'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Window = ({ children, title, icon }) => {\n  return (\n    <Frame boxShadow='out' marginBottom='10px'>\n      <TitleBar\n        active\n        icon={icon}\n        title={title}\n        width='100%'\n      >\n        <TitleBar.OptionsBox>\n          <TitleBar.Option>X</TitleBar.Option>\n        </TitleBar.OptionsBox>\n      </TitleBar>\n      <div style={{ minHeight: 200, padding: 10 }}>\n        {children}\n      </div>\n    </Frame>\n  )\n}\n\nWindow.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array\n  ]),\n  title: PropTypes.string,\n  icon: PropTypes.object\n}\n\nexport default Window\n","class Process {\n  id\n  maxTime\n  executionTime\n  operator\n  firstOperand\n  secondOperand\n  error\n  arrivalTime\n  startTime\n  endTime\n  timeToUnblock\n\n  constructor (id) {\n    this.id = id\n    this.maxTime = Math.floor(Math.random() * 10) + 6\n    this.executionTime = 0\n    this.operator = ['+', '-', '*', '/', '%', '^'][Math.floor(Math.random() * 6)]\n    this.firstOperand = Math.floor(Math.random() * 100)\n    this.secondOperand = Math.floor(Math.random() * 100) + 1\n    this.error = false\n    this.timeToUnblock = 0\n    this.arrivalTime = -1\n    this.startTime = -1\n  }\n\n  get operation () {\n    return `${this.firstOperand} ${this.operator} ${this.secondOperand}`\n  }\n\n  get result () {\n    return this.error === true ? 'ERROR' : this.evaluate()\n  }\n\n  throwError () {\n    this.error = true\n  }\n\n  block () {\n    this.timeToUnblock = 7\n  }\n\n  update () {\n    this.timeToUnblock > 0 ? --this.timeToUnblock : ++this.executionTime\n  }\n\n  isTerminated () {\n    return this.error === true || (this.maxTime === this.executionTime)\n  }\n\n  evaluate () {\n    switch (this.operator) {\n      case '+':\n        return this.firstOperand + this.secondOperand\n      case '-':\n        return this.firstOperand - this.secondOperand\n      case '*':\n        return this.firstOperand * this.secondOperand\n      case '/':\n        return this.firstOperand / this.secondOperand\n      case '%':\n        return this.firstOperand % this.secondOperand\n      case '^':\n        return Math.pow(this.firstOperand, this.secondOperand)\n      default:\n        return 'UNDEFINED'\n    }\n  }\n\n  toString () {\n    return `Process ${this.id}: ${this.firstOperand} ${this.operator} ${this.secondOperand} = ${this.result} took ${this.executionTime} seconds`\n  }\n\n  log () {\n    return `** PID ${this.id}, ${this.error ? 'ERROR' : 'NORMAL'} **\\n\n            Estimated Time: ${this.maxTime}\n            Arrival Time: ${this.arrivalTime}\n            End Time: ${this.endTime}\n            Standby Time: ${(this.endTime - this.arrivalTime) - this.executionTime}\n            Service Time: ${this.executionTime}\n            Return Time: ${this.endTime - this.arrivalTime}\n            Response Time: ${this.startTime - this.arrivalTime}\\n\\n************`\n  }\n}\n\nexport default Process\n","export const INTERRUPTIONS = {\n  e: {\n    description: 'I/O interruption'\n  },\n  w: {\n    description: 'Error in process'\n  },\n  p: {\n    description: 'Pause'\n  },\n  c: {\n    description: 'Continue'\n  }\n}\n","import './FirstComeFirstServed.css'\nimport styled from 'styled-components'\n\nimport { ProgressBar, Fieldset, TextArea, TaskBar, List, Button } from '@react95/core'\nimport { Notepad, BatWait, BatExec2, Qfecheck111, RecycleEmpty, User2 } from '@react95/icons'\nimport React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Window from '../../components/Window'\nimport { INTERRUPTIONS, generateProcesses, Process } from '../../utils'\n\nconst Container = styled.div`\n  margin: auto;\n  padding: 10px;\n  display: block;\n  width: 60%;\n`\n\nconst FirstComeFirstServed = ({ totalProcesses, processingDone }) => {\n  const [globalTime, setGlobalTime] = useState(0)\n  const [actionLogs, setActionLogs] = useState('')\n  const [newProcesses, setNewProcesses] = useState([])\n  const [readyProcesses, setReadyProcesses] = useState([])\n  const [processInExecution, setProcessInExecution] = useState()\n  const [blockedProcesses, setBlockedProcesses] = useState([])\n  const [terminatedProcesses, setTerminatedProcesses] = useState([])\n  const [isPaused, setIsPaused] = useState(false)\n  const [isProcessing, setIsProcessing] = useState(true)\n  const [lastKeyDown, setLastKeyDown] = useState(new Date())\n  const [reportLogged, setReportLogged] = useState(false)\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  const [simulationEnd, setSimulationEnd] = useState(null)\n\n  const MAX_PROCESSES_ON_MEMORY = 4\n\n  onkeydown = ({ key }) => {\n    key = key.toLowerCase()\n    let operationWasPerformed = false\n    const now = new Date()\n    setLastKeyDown(now)\n\n    if ((now - lastKeyDown) < 1000) {\n      setActionLogs(actionLogs + `[${now.toLocaleTimeString()}, Global Time: ${globalTime} seconds] - Actions are limited to 1 per second\\n`)\n      return\n    }\n\n    if (INTERRUPTIONS?.[key]) {\n      switch (key) {\n        case 'e':\n          if (isPaused === false && processInExecution instanceof Process) {\n            processInExecution.block()\n            blockedProcesses.push(processInExecution)\n            const nextProc = readyProcesses.shift()\n            if (nextProc instanceof Process) {\n              if (nextProc.startTime === -1) {\n                nextProc.startTime = globalTime\n              }\n              setProcessInExecution(nextProc)\n            } else {\n              setProcessInExecution(null)\n            }\n            operationWasPerformed = true\n          }\n          break\n        case 'w':\n          if (isPaused === false && processInExecution instanceof Process) {\n            processInExecution.throwError()\n            operationWasPerformed = true\n          }\n          break\n        case 'p':\n          if (isPaused === false) {\n            setIsPaused(true)\n            operationWasPerformed = true\n          }\n          break\n        case 'c':\n          if (isPaused === true) {\n            setIsPaused(false)\n            operationWasPerformed = true\n          }\n          break\n        default:\n          console.log(`Not implemented action triggered with ${key}`)\n      }\n\n      if (operationWasPerformed === true) {\n        setActionLogs(actionLogs + `[${new Date().toLocaleTimeString()}, Global Time: ${globalTime} seconds] - ${INTERRUPTIONS[key].description}\\n`)\n      }\n    }\n  }\n\n  useEffect(() => {\n    const newProcs = generateProcesses(totalProcesses)\n    const readyProcs = []\n\n    const procToExecute = newProcs.shift()\n    procToExecute.arrivalTime = 0\n    procToExecute.startTime = 0\n\n    const totalReadyProcesses = Math.min(newProcs.length, MAX_PROCESSES_ON_MEMORY - 1)\n    for (let i = 0; i < totalReadyProcesses; ++i) {\n      const process = newProcs.shift()\n      process.arrivalTime = 0\n      readyProcs.push(process)\n    }\n    setNewProcesses(newProcs)\n    setReadyProcesses(readyProcs)\n    setProcessInExecution(procToExecute)\n  }, [totalProcesses])\n\n  const updateBlockedProcesses = () => {\n    let procsToUnblock = 0\n    blockedProcesses.forEach((process) => {\n      if (process.timeToUnblock === 0) {\n        ++procsToUnblock\n      } else {\n        process.update()\n      }\n    })\n\n    for (let i = 0; i < procsToUnblock; ++i) {\n      readyProcesses.push(blockedProcesses.shift())\n    }\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setGlobalTime(globalTime => globalTime + 1)\n    }, 1000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    // Avoid updating more than 1 t/s\n    const now = new Date()\n    if ((now - lastUpdate) < 900) {\n      return\n    }\n    setLastUpdate(now)\n\n    // Check if process end\n    if (newProcesses.length === 0 && readyProcesses.length === 0 && blockedProcesses.length === 0 && processInExecution === null) {\n      setIsProcessing(false)\n      if (simulationEnd === null) {\n        setSimulationEnd(globalTime)\n      }\n      return\n    }\n\n    if (isProcessing === false && reportLogged === false) {\n      let report = `[${new Date().toLocaleTimeString()}, Global Time: ${globalTime} seconds] - All process were terminated, generating report...\\n--------------------\\n`\n      terminatedProcesses.forEach(proc => {\n        report += proc.log() + '\\n'\n      })\n      report += '--------------------\\n'\n\n      setActionLogs(actionLogs + report)\n      setReportLogged(true)\n      setProcessInExecution(null)\n    }\n\n    if (isPaused === false && isProcessing === true) {\n      updateBlockedProcesses()\n\n      if (processInExecution instanceof Process) {\n        if (processInExecution.isTerminated()) {\n          // Push to terminated\n          processInExecution.endTime = globalTime - 1\n          terminatedProcesses.push(processInExecution)\n\n          // If there is a new process add it to ready\n          if (newProcesses.length > 0) {\n            const readyProc = newProcesses.shift()\n            if (readyProc.arrivalTime === -1) {\n              readyProc.arrivalTime = globalTime\n            }\n            readyProcesses.push(readyProc)\n          }\n\n          // Define next process will be executed\n          const nextReadyProc = readyProcesses.shift()\n          if (nextReadyProc instanceof Process) {\n            if (nextReadyProc.startTime === -1) {\n              nextReadyProc.startTime = globalTime\n            }\n            setProcessInExecution(nextReadyProc)\n          } else {\n            // If there are no blocked processes, end processing\n            if (blockedProcesses.length === 0) {\n              setIsProcessing(false)\n              if (simulationEnd === null) {\n                setSimulationEnd(globalTime)\n              }\n            } else {\n              setProcessInExecution(null)\n            }\n          }\n        } else {\n          if (processInExecution.timeToUnblock === 0) {\n            processInExecution.update()\n          }\n        }\n      } else {\n        // If there is no process in execution, check if one is ready\n        if (readyProcesses.length > 0) {\n          const nextProc = readyProcesses.shift()\n          if (nextProc.startTime === -1) {\n            nextProc.startTime = globalTime\n          }\n          setProcessInExecution(nextProc)\n        }\n      }\n    }\n  }, [reportLogged, setGlobalTime, globalTime, setIsPaused, isPaused, isProcessing, processInExecution, terminatedProcesses, newProcesses, readyProcesses, blockedProcesses, setBlockedProcesses, setTerminatedProcesses])\n\n  return (\n    <>\n      <Container>\n        <div style={{ textAlign: 'center' }}>\n          <h1>New processes: {newProcesses.length}</h1>\n          {\n            !isProcessing && simulationEnd !== null\n              ? (\n                <>\n                  <h2>Global Time: {simulationEnd} seconds</h2>\n                  <Button onClick={processingDone}>Return</Button>\n                </>\n                )\n              : (<h2>Global Time: {globalTime} seconds</h2>)\n          }\n        </div>\n        <br />\n        <Window title='ready - Process Simulation' icon={<BatWait variant='32x32_4' />}>\n          {\n            readyProcesses.map((process, index) => (\n              <Fieldset key={index} legend={`PID ${process.id}`} style={{ width: '90%', textAlign: 'left', marginBottom: 10 }}>\n                <p key={index + '_p'}>Estimated execution time: {process.maxTime} seconds - Ellapsed time: {process.executionTime} seconds</p>\n              </Fieldset>)\n            )\n          }\n        </Window>\n        <Window title='execution - Process Simulation' icon={<BatExec2 variant='32x32_4' />}>\n          {\n            processInExecution instanceof Process\n              ? (\n                <Fieldset legend={`PID ${processInExecution.id}`} className='process-fieldset'>\n                  <p>Operation: {processInExecution.operation}</p>\n                  <p>Estimated execution time: {processInExecution.maxTime} seconds</p>\n                  <p>Ellapsed time: {processInExecution.executionTime} seconds</p>\n                  <p>Missing time: {processInExecution.maxTime - processInExecution.executionTime} seconds</p>\n                  <ProgressBar width={200} percent={Math.round(processInExecution.executionTime / processInExecution.maxTime * 100)} />\n                </Fieldset>\n                )\n              : (<></>)\n          }\n        </Window>\n        <Window title='blocked - Process Simulation' icon={<User2 variant='32x32_4' />}>\n          {\n            Array.isArray(blockedProcesses)\n              ? blockedProcesses.map((process, index) => (\n                <Fieldset key={index} legend={`PID ${process.id}`} style={{ width: '90%', textAlign: 'left', marginBottom: 10 }}>\n                  <p key={index + '_p'}>Estimated execution time: {process.maxTime} seconds - Blocked time: {7 - process.timeToUnblock} seconds</p>\n                </Fieldset>)\n              )\n              : (<></>)\n          }\n        </Window>\n        <Window title='terminated - Process Simulation' icon={<Qfecheck111 variant='32x32_4' />}>\n          {\n            Array.isArray(terminatedProcesses)\n              ? terminatedProcesses.map(process => (\n                <Fieldset key={process.id} legend={`PID ${process.id}`} className='process-fieldset'>\n                  <p key={process.id + '_p'}>{process.operation} = {process.result}</p>\n                </Fieldset>)\n              )\n              : (<></>)\n          }\n        </Window>\n        <Window title='logs.txt - Notepad' icon={<Notepad variant='32x32_4' />}>\n          <TextArea readOnly value={actionLogs} style={{ width: '100%', height: 200 }} />\n          <br /><br />\n          <Button onClick={() => { setActionLogs('') }}>Clear logs</Button>\n        </Window><br />\n      </Container>\n      <TaskBar\n        list={\n          <List>\n            <List.Item\n              key='reset'\n              icon={<RecycleEmpty variant='32x32_4' />}\n              onClick={() => {\n                setIsProcessing(false)\n                processingDone()\n              }}\n            >\n              Empty and Restart\n            </List.Item>\n          </List>\n        }\n      />\n    </>\n  )\n}\n\nFirstComeFirstServed.propTypes = {\n  totalProcesses: PropTypes.number,\n  processingDone: PropTypes.func\n}\n\nexport default FirstComeFirstServed\n","import { Process } from '.'\n\nexport const generateProcesses = (totalProcesses) => {\n  console.log('Executing process initialization...')\n\n  let id = 0\n  const processes = []\n  for (let i = 0; i < totalProcesses; ++i) {\n    processes.push(new Process(id++))\n  }\n\n  return processes\n}\n","import styled from 'styled-components'\n\nimport { Button, Input } from '@react95/core'\nimport React, { useState } from 'react'\n\nimport Title from './components/Title'\nimport FirstComeFirstServed from './pages/FirstComeFirstServed'\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`\n\nfunction App () {\n  const [totalProcesses, setTotalProcesses] = useState(0)\n  const [isProcessing, setIsProcessing] = useState(false)\n\n  const startProcessing = e => {\n    e.preventDefault()\n    setIsProcessing(true)\n  }\n\n  const processingDone = () => {\n    setIsProcessing(false)\n  }\n\n  return (\n    isProcessing === false\n      ? (\n          <Form onSubmit={startProcessing}>\n            <Title>First Come First Served</Title>\n            <Input\n              placeholder='# of processes'\n              style={{ marginBottom: 10 }}\n              type='number'\n              min='1'\n              onChange={({ target }) => setTotalProcesses(target.value)}\n              required\n            />\n            <br />\n            <Button>Start</Button>\n          </Form>\n        )\n      : (<FirstComeFirstServed totalProcesses={parseInt(totalProcesses)} processingDone={processingDone} />)\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider, GlobalStyle } from '@react95/core'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <ThemeProvider>\n    <GlobalStyle />\n      <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}